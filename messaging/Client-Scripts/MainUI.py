# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'ClientUI.ui'
#
# Created by: PyQt5 UI code generator 5.15.11
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

###TODO###
# func to refresh chat logs - DONE
# func to refresh friends list - DONE
# func to be activated when pressed a button that adds the message box contents to a list and then clears the message box - DONE
# func to refresh the chats list - DONE

from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtGui import QStandardItemModel, QStandardItem
import keyboard
import time
import pyautogui
import threading
import string

class Ui_MainWindow(QtCore.QObject):
    def __init__(self, mainWindow):

        # init the QObject
        super().__init__()

        # add all shapes
        self.setupUi(mainWindow)

        # setups for periodic and input
        self.SendButton.clicked.connect(self.getMessageBox)
        self.timer = QtCore.QTimer()
        self.timer.timeout.connect(self.periodic)
        self.timer.start(500)

        # message storage setup
        self.messages = []
        self.latestMessage = ''
        self.chatModel = QtCore.QStringListModel()
        self.ChatMessages.setModel(self.chatModel)
        self.currentChatList = self.chatModel.stringList()

        # chosen friend/list stuff
        self.activeChatters = 0
        self.activeFriends = 0
        self.friendIndex = 0
        self.chatIndex = 0
        self.friendList = []
        self.chatList = []
        self.friendsModel = QtCore.QStringListModel()
        self.chatsModel = QtCore.QStringListModel()
        self.FriendsList.setModel(self.friendsModel)
        self.ChatsList.setModel(self.chatsModel)
        self.FriendsList.clicked.connect(self.friendListClick)
        self.ChatsList.clicked.connect(self.chatListClick)

    def setupUi(self, MainWindow):

        # sets the scale factor (default is 3)
        self.ScaleFactor = 5

        # object Creation
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(562*self.ScaleFactor, 343*self.ScaleFactor)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.ChatMessages = QtWidgets.QListView(self.centralwidget)
        self.ChatMessages.setGeometry(QtCore.QRect(0*self.ScaleFactor, 10*self.ScaleFactor, 376*self.ScaleFactor, 256*self.ScaleFactor))
        self.ChatMessages.setObjectName("ChatList")
        self.HeaderLabel = QtWidgets.QLabel(self.centralwidget)
        self.HeaderLabel.setGeometry(QtCore.QRect(0, 0, 150*self.ScaleFactor, 11*self.ScaleFactor))
        self.HeaderLabel.setObjectName("HeaderLabel")
        self.ChatsList = QtWidgets.QListView(self.centralwidget)
        self.ChatsList.setGeometry(QtCore.QRect(370*self.ScaleFactor, 10*self.ScaleFactor, 106*self.ScaleFactor, 291*self.ScaleFactor))
        self.ChatsList.setObjectName("ChatsList")
        self.FriendsList = QtWidgets.QListView(self.centralwidget)
        self.FriendsList.setGeometry(QtCore.QRect(475*self.ScaleFactor, 10*self.ScaleFactor, 86*self.ScaleFactor, 291*self.ScaleFactor))
        self.FriendsList.setObjectName("FreindsList")
        self.SendButton = QtWidgets.QPushButton(self.centralwidget)
        self.SendButton.setGeometry(QtCore.QRect(341*self.ScaleFactor, 265*self.ScaleFactor, 31*self.ScaleFactor, 36*self.ScaleFactor))
        self.SendButton.setObjectName("SendButton")
        self.MessageArea = QtWidgets.QPlainTextEdit(self.centralwidget)
        self.MessageArea.setGeometry(QtCore.QRect(0*self.ScaleFactor, 265*self.ScaleFactor, 341*self.ScaleFactor, 36*self.ScaleFactor))
        self.MessageArea.setObjectName("MessageArea")
        self.MessageArea.installEventFilter(self)
        self.ActiveChatters = QtWidgets.QLabel(self.centralwidget)
        self.ActiveChatters.setGeometry(QtCore.QRect(160*self.ScaleFactor, 0, 95*self.ScaleFactor, 11*self.ScaleFactor))
        self.ActiveChatters.setObjectName("ActiveChatters")
        self.ActiveFriends = QtWidgets.QLabel(self.centralwidget)
        self.ActiveFriends.setGeometry(QtCore.QRect(265*self.ScaleFactor, 0, 85*self.ScaleFactor, 11*self.ScaleFactor))
        self.ActiveFriends.setObjectName("ActiveFriends")
        self.Chats = QtWidgets.QLabel(self.centralwidget)
        self.Chats.setGeometry(QtCore.QRect(370*self.ScaleFactor, 0, 39*self.ScaleFactor, 11*self.ScaleFactor))
        self.Chats.setObjectName("Chats")
        self.Friends = QtWidgets.QLabel(self.centralwidget)
        self.Friends.setGeometry(QtCore.QRect(480*self.ScaleFactor, 0, 39*self.ScaleFactor, 11*self.ScaleFactor))
        self.Friends.setObjectName("Friends")
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 562*self.ScaleFactor, 20*self.ScaleFactor))
        self.menubar.setObjectName("menubar")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        # translation
        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "StellarClientUI"))
        self.HeaderLabel.setText(_translate("MainWindow", "Mon Day Year@Hour:Minute:Second"))
        self.SendButton.setText(_translate("MainWindow", "Send"))
        self.ActiveChatters.setText(_translate("MainWindow", "Active Chatters: 12/15"))
        self.ActiveFriends.setText(_translate("MainWindow", "Active Friends: 20/30"))
        self.Chats.setText(_translate("MainWindow", "Chats:"))
        self.Friends.setText(_translate("MainWindow", "Friends:"))
    
    def eventFilter(self, obj, event):
        """Input from the user with keypresses, called automatically"""

        # keypresses
        if obj == self.MessageArea and event.type() == QtCore.QEvent.KeyPress:

            # enter
            if event.key() in (QtCore.Qt.Key_Return, QtCore.Qt.Key_Enter):
                if not (event.modifiers() & QtCore.Qt.ShiftModifier):

                    # run the send message bit
                    self.getMessageBox()
                    return True
        return super().eventFilter(obj, event)

    def getMessageBox(self):
        """Function to get input text from user, adds text to list and clears message box. Does nothing if the box is either empty or only spaces"""

        # get message
        message = self.MessageArea.toPlainText()
        cont = False

        # check if message has actual text
        for i in message:
            if i in string.printable and i != ' ':
                cont = True

        # run the clearing and sending/saving
        if cont:
            self.MessageArea.setPlainText('')
            self.messages.append(message)
            self.latestMessage = message
            self.addChatBoxText(message)

    def friendListClick(self, index):
        """Called on click of a friend, sets self.friendIndex to the row index of the selected box"""
        row = index.row()
        self.friendIndex = row
    
    def chatListClick(self, index):
        """Called on click of a chat, sets self.chatIndex to the row index of the selected box"""
        row = index.row()
        self.chatIndex = row

    def addChatBoxText(self, text: str):
        """Adds value to the list of messages onscreen"""

        # add to list object and scroll down
        self.currentChatList.append(text)
        self.chatModel.setStringList(self.currentChatList)
        self.ChatMessages.scrollToBottom()
    
    def timeUpdate(self):
        """Function to update time on messaging screen"""

        # get the current local time struct
        current_time_struct = time.localtime()

        ## Time Structuring
        # %m: Month as a zero-padded decimal number
        # %d: Day of the month as a zero-padded decimal number
        # %Y: Year with century as a decimal number
        # %H: Hour (24-hour clock) as a zero-padded decimal number
        # %M: Minute as a zero-padded decimal number
        # %S: Second as a zero-padded decimal number
        formatted_time = time.strftime("%m/%d/%Y, %H:%M:%S", current_time_struct)

        # apply time
        self.HeaderLabel.setText(formatted_time)

    def periodic(self):
        """Periodic function for the messageing service"""
        self.timeUpdate()
        self.updateFriendList()
        self.updateChatsList()
        self.updateFriendCount(self.activeFriends)
        self.updateChattersCount(self.activeChatters)

    def getMessageList(self):
        """Gets all sent messages in session, returns empty list if none"""
        try:
            return self.messages
        except:
            return []
        
    def setMessageList(self, list):
        """Sets the list of all messages in current chat"""
        # set message list to the given list
        self.messages = list
        self.chatModel.setStringList(self.currentChatList)
        self.ChatMessages.scrollToBottom()

    def getLatestMessage(self):
        """Get latest sent message, returns blank if no string"""
        try:
            return self.latestMessage
        except:
            return ''

    def updateFriendCount(self, num: int):
        """Update friend count on screen, returns true if successful"""
        try:
            self.ActiveFriends.setText(f'Active Friends: {num}')
            return True
        except:
            return False
        
    def updateChattersCount(self, num: int):
        """Update chatters count on screen, returns true if successful"""
        try:
            self.ActiveChatters.setText(f'Active Chatters: {num}')
            return True
        except:
            return False
        
    def updateFriendList(self):
        self.friendsModel.setStringList(self.friendList)

    def updateChatsList(self):
        self.chatsModel.setStringList(self.chatList)
        
    


if __name__ == "__main__":

    # setting up all the screen elements
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow(MainWindow)
    MainWindow.show()
    app.exec_()

    ## For testing, checks messages ##
    # print(ui.messages)
